#+TITLE: Elm & Elixir
#+OPTIONS: num:nil
# Author is used as subtitle on the title slide, don't know how to change that
#+AUTHOR: ФП-Среда
#+REVEAL_HLEVEL: 2
#+REVEAL_TRANS: none
#+REVEAL_EXTRA_CSS: воркшоп-elm-elixir.css
#+REVEAL_PLUGINS: (highlight)
#+EXPORT_FILE_NAME: index.html

* Elm & Elixir
- Elm :: a delightful language for reliable webapps
- Elixir :: a dynamic, functional language designed for building scalable and maintainable applications
  #+begin_notes
  Сегодня мы вам расскажем про два языка программирования: elm и elixir
  #+end_notes
* Elm & Elixir
| Elm              | Elixir            |
|------------------+-------------------|
| statically typed | dynamically typed |
| ml-like syntax   | ruby-like syntax  |
| frontend use     | backend use       |
  #+begin_notes
  На первый взгляд эти языки очень сильно разнятся, но их обьединяет одно:
  функциональное программирование
  #+end_notes

* Функциональный стиль
- Данные
- Вычисления
- Действия
** Функциональное программирование
- Данные :: неизменяемые факты о событиях внутри или вне системы
** Функциональное программирование
- Вычисления :: функции, результат которых всегда одинаков при одинаковых аргументах и отражается только
  на возвращаемом значении
** Функциональное программирование
- Действия :: взаимодействие с I/O или изменение глобального состояния
* Инструменты для работы с данными
- Alebraic Data Types
- Pattern Matching
- Иммутабельные структуры данных
** Инструменты для работы с данными
- Algebraic Data Types :: способ описания типов данных как композицию других
  типов данных
** Algebraic Data Types
- Product Type :: a.k.a. tuple a.k.a. record
  #+begin_src elm
person =
    { name: String,
      age : Int   }
  #+end_src
- Coproduct (Sum) Type :: a.k.a union
  #+begin_src elm
boolean = True | False
  #+end_src
** Инструменты для работы с данными
 - Pattern Matching :: a.k.a. switch выражение на стероидах
 - Destructuring :: извлечение данных из ADT со специальным синтаксисом
** Pattern Matching
#+begin_src elixir
def fizzbuzz(n) do
  case {rem(n, 3), rem(n,5)} do
    {0, 0} -> "FizzBuzz"
    {0, _} -> "Fizz"
    {_, 0} -> "Buzz"
    _ -> n
  end
end
#+end_src
** Инструменты для работы с данными
- Иммутабельные структуры данных :: структуры данных, не поддерживающие изменение
- Персистентные структуры данных :: стурктуры данных, переиспользующие общие
  куски между собой
* Инструменты для работы с вычислениями
- Функции высшего порядка
- Композиция функций
** Инструменты для работы с вычислениями
- Функции высшего порядка :: функции как значения - их можно принимать как
  аргументы других функций или возвращать как результат
** Инструменты для работы с вычислениями
- Композиция функций :: применение одной функции к результату другой
  #+begin_src elm
f : a -> b
g : b -> c

h : a -> c
h x = g (f (x))
  #+end_src
* Инструменты для работы с действиями
- Данные
- Вычисления
** Внутри любого действия есть вычисления и данные
* Образ мышления фп
- Начинайте с модели данных
- Напишите действия
- Выделите логику в чистые функции, протестируйте
- Повторите
** Функциональное вносит простоту
- Вычисления вместо действий
- Значения вместо переменных
* Формат практикума
